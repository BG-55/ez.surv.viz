% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/timepoint_plots.R
\name{timepoint_plot}
\alias{timepoint_plot}
\title{Create subject timepoint plots}
\usage{
timepoint_plot(
  data_name = NULL,
  id = "id",
  start_time = 0,
  outcome_colors = NULL,
  col_palette = "Dark 3",
  xlab_name = "Time",
  ylab_name = "ID",
  legend_name = "Outcome",
  line_size = 0.5,
  point_size = 3,
  legend_text_size = 10,
  legend_title_text_size = 12,
  legend_size = 0.5
)
}
\arguments{
\item{data_name}{a dataframe in long format consisting of 1 id column where each subject has a unique indentifier, and the rest of the columns should be event columns with the time of the event for the subject and NA if they did not have the event}

\item{id}{a charatcer that is the name of the id column. Default is "id".}

\item{start_time}{a number that gives the time that lines should start at. Default is 0.}

\item{outcome_colors}{A vector consisting of the color names/hexadecimals. Default is colors from Dark 3 palette.}

\item{col_palette}{A string containing the name of the hcl palette to use. See hcl.pals() for names. Default is Dark 3.}

\item{xlab_name}{Label for the x-axis. Default is "Time".}

\item{ylab_name}{Label for the y-axis. Default is "ID".}

\item{legend_name}{Label for the legend. Default is "outcome".}

\item{line_size}{A numeric containing the value of the line thickness. Default is 0.5.}

\item{point_size}{A numeric containing the value of the point size Default is 3.}

\item{legend_text_size}{A number that determines the size of the text in the legend. Default is 10.}

\item{legend_title_text_size}{A number that determines the size of the title in the legend. Default is 12.}

\item{legend_size}{A number that determines the size of the legend in centimeters. Default is 0.5.}
}
\value{
a GGPlot object with the time point plots for each subject
}
\description{
Create subject timepoint plots
}
\examples{
var_labels <- paste("Event",1:5)
#Dataset setup with id and event columns
toy <- data.frame(id = c("1","2","3"), e_1 = c(1,4,8), e_2 = c(NA,6,NA),
e_3 = c(4,NA,6), e_4 = c(2,10,NA), e_5 = c(10,12,14))
#Because of missing values for people with missing events ggplot gives useless warnings
#So we run the code like this to avoid seeing them
base::suppressWarnings(print(timepoint_plot(toy)))
#Example with multiple events for a person
toy2 <- data.frame(id = c("1","2","3"), e_1 = c(1,4,8), e_1_2 = c(3,NA,NA), e_2 = c(NA,6,NA),
e_3 = c(4,NA,6), e_4 = c(2,10,NA), e_4_2 = c(4,17,NA), e_5 = c(10,12,14)) \%>\%
# For each variable we pivot longer all of the columns where the person could have an event
# and put them back into one column with the event name
tidyr::pivot_longer(cols = c(e_1,e_1_2), names_to = NULL, values_to = 'e_1') \%>\%
tidyr::pivot_longer(cols = c(e_4,e_4_2), names_to = NULL, values_to = 'e_4')
base::suppressWarnings(print(timepoint_plot(toy2)))
}
